{"ast":null,"code":"var _jsxFileName = \"/Users/arjunnargolwala/Documents/AutonomyLabs-Web-App/src/components/NetworkGraph.js\";\n// src/components/NetworkGraph.js\nimport React, { useEffect, useRef } from 'react';\nimport '../styles/NetworkGraph.css';\nconst nodeCount = 30;\nconst connectDistance = 120;\nconst NetworkGraph = () => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const nodes = Array.from({\n      length: nodeCount\n    }).map(() => ({\n      x: Math.random() * canvas.width,\n      y: Math.random() * canvas.height,\n      dx: Math.random() * 2 - 1,\n      dy: Math.random() * 2 - 1\n    }));\n    const animate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      drawConnections(context, nodes);\n      updateNodes(nodes, canvas);\n      requestAnimationFrame(animate);\n    };\n    animate();\n  }, []);\n  const updateNodes = (nodes, canvas) => {\n    nodes.forEach(node => {\n      node.x += node.dx;\n      node.y += node.dy;\n      if (node.x <= 0 || node.x >= canvas.width) node.dx *= -1;\n      if (node.y <= 0 || node.y >= canvas.height) node.dy *= -1;\n    });\n  };\n  const drawConnections = (context, nodes) => {\n    nodes.forEach((node, i) => {\n      nodes.slice(i + 1).forEach(otherNode => {\n        const distance = Math.hypot(node.x - otherNode.x, node.y - otherNode.y);\n        if (distance < connectDistance) {\n          context.beginPath();\n          context.moveTo(node.x, node.y);\n          context.lineTo(otherNode.x, otherNode.y);\n          context.strokeStyle = `rgba(255, 255, 255, ${1 - distance / connectDistance})`;\n          context.lineWidth = 0.5;\n          context.stroke();\n        }\n      });\n    });\n    nodes.forEach(node => {\n      context.beginPath();\n      context.arc(node.x, node.y, 3, 0, Math.PI * 2);\n      context.fillStyle = '#ffffff';\n      context.fill();\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: 800,\n    height: 600,\n    className: \"network-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  });\n};\nexport default NetworkGraph;","map":{"version":3,"names":["React","useEffect","useRef","nodeCount","connectDistance","NetworkGraph","canvasRef","canvas","current","context","getContext","nodes","Array","from","length","map","x","Math","random","width","y","height","dx","dy","animate","clearRect","drawConnections","updateNodes","requestAnimationFrame","forEach","node","i","slice","otherNode","distance","hypot","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","arc","PI","fillStyle","fill","createElement","ref","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/arjunnargolwala/Documents/AutonomyLabs-Web-App/src/components/NetworkGraph.js"],"sourcesContent":["// src/components/NetworkGraph.js\nimport React, { useEffect, useRef } from 'react';\nimport '../styles/NetworkGraph.css';\n\nconst nodeCount = 30;\nconst connectDistance = 120;\n\nconst NetworkGraph = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const nodes = Array.from({ length: nodeCount }).map(() => ({\n      x: Math.random() * canvas.width,\n      y: Math.random() * canvas.height,\n      dx: Math.random() * 2 - 1,\n      dy: Math.random() * 2 - 1,\n    }));\n\n    const animate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      drawConnections(context, nodes);\n      updateNodes(nodes, canvas);\n      requestAnimationFrame(animate);\n    };\n\n    animate();\n  }, []);\n\n  const updateNodes = (nodes, canvas) => {\n    nodes.forEach((node) => {\n      node.x += node.dx;\n      node.y += node.dy;\n\n      if (node.x <= 0 || node.x >= canvas.width) node.dx *= -1;\n      if (node.y <= 0 || node.y >= canvas.height) node.dy *= -1;\n    });\n  };\n\n  const drawConnections = (context, nodes) => {\n    nodes.forEach((node, i) => {\n      nodes.slice(i + 1).forEach((otherNode) => {\n        const distance = Math.hypot(node.x - otherNode.x, node.y - otherNode.y);\n        if (distance < connectDistance) {\n          context.beginPath();\n          context.moveTo(node.x, node.y);\n          context.lineTo(otherNode.x, otherNode.y);\n          context.strokeStyle = `rgba(255, 255, 255, ${1 - distance / connectDistance})`;\n          context.lineWidth = 0.5;\n          context.stroke();\n        }\n      });\n    });\n\n    nodes.forEach((node) => {\n      context.beginPath();\n      context.arc(node.x, node.y, 3, 0, Math.PI * 2);\n      context.fillStyle = '#ffffff';\n      context.fill();\n    });\n  };\n\n  return <canvas ref={canvasRef} width={800} height={600} className=\"network-graph\" />;\n};\n\nexport default NetworkGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}